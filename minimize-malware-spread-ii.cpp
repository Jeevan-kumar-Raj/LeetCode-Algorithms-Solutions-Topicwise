// Time:  O(n^2)
// Space: O(n)

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        unordered_set<int> initial_set(initial.cbegin(), initial.cend());
        vector<int> clean;
        for (int i = 0; i < graph.size(); ++i) {
            if (!initial_set.count(i)) {
                clean.emplace_back(i);
            }
        }
        UnionFind union_find(graph.size());
        for (int i = 0; i < clean.size(); ++i) {
            for (int j = i + 1; j < clean.size(); ++j) {
                if (graph[clean[i]][clean[j]] == 1) {
                    union_find.union_set(clean[i], clean[j]);
                }
            }
        }
        unordered_map<int, int> union_size;
        for (int i = 0; i < graph.size(); ++i) {
            ++union_size[union_find.find_set(i)];
        }
        
        unordered_map<int, unordered_set<int>> shared_union;
        for (const auto& i: initial) {
            for (const auto& j : clean) {
                if (graph[i][j] == 1) {
                    auto x = union_find.find_set(j);
                    shared_union[x].emplace(i);
                }
            }
        }

        int result = numeric_limits<int>::max();
        int total = numeric_limits<int>::min();   
        for (const auto& i : initial) {
            unordered_set<int> lookup;
            int curr = 0;
            for (const auto& j : clean) {
                if (graph[i][j] == 1) {
                    auto x = union_find.find_set(j);
                    if (shared_union[x].size() == 1 &&
                        !lookup.count(x)) {
                        curr += union_size[x];
                        lookup.emplace(x);
                    }
                }
            }
            if (curr > total ||
                (curr == total && i < result)) {
                total = curr;
                result = i;
            }
        }
        return result;
    }

private:
    class UnionFind {
        public:
            UnionFind(const int n) : set_(n) {
                iota(set_.begin(), set_.end(), 0);
            }

            int find_set(const int x) {
               if (set_[x] != x) {
                   set_[x] = find_set(set_[x]);  // Path compression.
               }
               return set_[x];
            }

            bool union_set(const int x, const int y) {
                int x_root = find_set(x), y_root = find_set(y);
                if (x_root == y_root) {
                    return false;
                }
                set_[min(x_root, y_root)] = max(x_root, y_root);
                return true;
            }

        private:
            vector<int> set_;
    };
};
