// Time:  O(n^2)
// Space: O(n)

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        UnionFind union_find(graph.size());
        for (int i = 0; i < graph.size(); ++i) {
            for (int j = i + 1; j < graph.size(); ++j) {
                if (graph[i][j] == 1) {
                    union_find.union_set(i, j);
                }
            }
        }
        unordered_map<int, int> union_size;
        for (int i = 0; i < graph.size(); ++i) {
            ++union_size[union_find.find_set(i)];
        }
        unordered_map<int, int> malware_count;
        for (const auto& i : initial) {
            ++malware_count[union_find.find_set(i)];
        }
        return *min_element(initial.cbegin(), initial.cend(), 
                            [&](const int& a, const int& b) {
                                return make_tuple(malware_count[union_find.find_set(a)] > 1 ? 1 : 0,
                                                 -union_size[union_find.find_set(a)],
                                                 a) < 
                                       make_tuple(malware_count[union_find.find_set(b)] > 1 ? 1 : 0,
                                                 -union_size[union_find.find_set(b)],
                                                 b);
                            });
    }

private:
    class UnionFind {
        public:
            UnionFind(const int n) : set_(n) {
                iota(set_.begin(), set_.end(), 0);
            }

            int find_set(const int x) {
               if (set_[x] != x) {
                   set_[x] = find_set(set_[x]);  // Path compression.
               }
               return set_[x];
            }

            bool union_set(const int x, const int y) {
                int x_root = find_set(x), y_root = find_set(y);
                if (x_root == y_root) {
                    return false;
                }
                set_[min(x_root, y_root)] = max(x_root, y_root);
                return true;
            }

        private:
            vector<int> set_;
    };
};
